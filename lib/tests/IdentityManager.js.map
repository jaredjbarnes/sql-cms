{"version":3,"sources":["../../src/tests/IdentityManager.js"],"names":["exports","assert","throws","identityManager","IdentityManager","message","actingIdentity","id","name","cmsDatabase","CmsDatabase","getCmsDatabaseAsync","secret","isAdmin","addIdentityAsync","identity","getIdentityByNameAsync","otherIdentityManager","isValid","validatePasswordAsync","equal","error","removeIdentityAsync","resetPasswordAsync","changePasswordAsync"],"mappings":"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","sourcesContent":["import * as assert from \"assert\";\nimport CmsDatabase from \"../CmsDatabase\";\nimport IdentityManager from \"../managers/IdentityManager\";\n\nexports[\"IdentityManager: constructor with no arguments.\"] = async () => {\n    assert.throws(() => {\n        const identityManager = new IdentityManager();\n    },\n        {\n            message: \"Null Argument Exception: IdentityManager expected an actingIdentity.\"\n        }\n    );\n}\n\nexports[\"IdentityManager: constructor with actingIdentity.\"] = async () => {\n    assert.throws(() => {\n        const identityManager = new IdentityManager({\n            actingIdentity: {\n                id: 0,\n                name: \"johndoe\"\n            }\n        });\n    },\n        {\n            message: \"Null Argument Exception: IdentityManager expected a cmsDatabase.\"\n        }\n    );\n}\n\nexports[\"IdentityManager: constructor with actingIdentity and cmsDatabase.\"] = async () => {\n    const cmsDatabase = await CmsDatabase.getCmsDatabaseAsync(\":memory:\");\n\n    assert.throws(() => {\n        const identityManager = new IdentityManager({\n            actingIdentity: {\n                id: 0,\n                name: \"johndoe\"\n            },\n            cmsDatabase\n        });\n    },\n        {\n            message: \"Null Argument Exception: IdentityManager expected a secret for hashing passwords.\"\n        }\n    );\n}\n\nexports[\"IdentityManager: constructor with valid arguments.\"] = async () => {\n    const cmsDatabase = await CmsDatabase.getCmsDatabaseAsync(\":memory:\");\n    const identityManager = new IdentityManager({\n        actingIdentity: {\n            id: 0,\n            name: \"johndoe\"\n        },\n        cmsDatabase,\n        secret: \"secret\"\n    });\n}\n\nexports[\"IdentityManager: addIdentityAsync.\"] = async () => {\n    const secret = \"secret\";\n    const cmsDatabase = await CmsDatabase.getCmsDatabaseAsync(\":memory:\");\n    const identityManager = new IdentityManager({\n        actingIdentity: {\n            id: 0,\n            name: \"admin\",\n            isAdmin: true\n        },\n        cmsDatabase,\n        secret\n    });\n\n    await identityManager.addIdentityAsync({ name: \"johndoe\" }, \"password\");\n    const identity = await identityManager.getIdentityByNameAsync(\"johndoe\");\n\n    const otherIdentityManager = new IdentityManager({\n        actingIdentity: identity,\n        cmsDatabase,\n        secret\n    });\n\n    const isValid = await otherIdentityManager.validatePasswordAsync(\"password\");\n    assert.equal(isValid, true);\n}\n\nexports[\"IdentityManager: validatePasswordAsync, valid password.\"] = async () => {\n    const secret = \"secret\";\n    const cmsDatabase = await CmsDatabase.getCmsDatabaseAsync(\":memory:\");\n    const identityManager = new IdentityManager({\n        actingIdentity: {\n            id: 0,\n            name: \"johndoe\",\n            isAdmin: true\n        },\n        cmsDatabase,\n        secret: secret\n    });\n\n    await identityManager.addIdentityAsync({ name: \"johndoe\" }, \"password\");\n    let identity = await identityManager.getIdentityByNameAsync(\"johndoe\");\n\n    const otherIdentityManager = new IdentityManager({\n        actingIdentity: identity,\n        cmsDatabase,\n        secret\n    });\n\n    const isValid = await otherIdentityManager.validatePasswordAsync(\"password\");\n    assert.equal(isValid, true);\n\n}\n\nexports[\"IdentityManager: validatePasswordAsync, invalid password.\"] = async () => {\n    const secret = \"secret\";\n    const cmsDatabase = await CmsDatabase.getCmsDatabaseAsync(\":memory:\");\n    const identityManager = new IdentityManager({\n        actingIdentity: {\n            id: 0,\n            name: \"johndoe\",\n            isAdmin: true\n        },\n        cmsDatabase,\n        secret: secret\n    });\n\n    await identityManager.addIdentityAsync({ name: \"johndoe\" }, \"password\");\n    let identity = await identityManager.getIdentityByNameAsync(\"johndoe\");\n\n    const otherIdentityManager = new IdentityManager({\n        actingIdentity: identity,\n        cmsDatabase,\n        secret\n    });\n\n    try {\n        const isValid = await otherIdentityManager.validatePasswordAsync(\"BadPa$$word\");\n    } catch (error) {\n        assert.equal(error.message, \"Invalid password.\");\n    }\n\n}\n\nexports[\"IdentityManager: removeIdentityAsync.\"] = async () => {\n    const secret = \"secret\";\n    const cmsDatabase = await CmsDatabase.getCmsDatabaseAsync(\":memory:\");\n    const identityManager = new IdentityManager({\n        actingIdentity: {\n            id: 0,\n            name: \"admin\",\n            isAdmin: true\n        },\n        cmsDatabase,\n        secret\n    });\n\n    await identityManager.addIdentityAsync({ name: \"johndoe\" }, \"password\");\n    let identity = await identityManager.getIdentityByNameAsync(\"johndoe\");\n    await identityManager.removeIdentityAsync(identity);\n\n    identity = await identityManager.getIdentityByNameAsync(\"johndoe\");\n\n    assert.equal(identity, null);\n\n}\n\nexports[\"IdentityManager: resetPasswordAsync.\"] = async () => {\n    const secret = \"secret\";\n    const cmsDatabase = await CmsDatabase.getCmsDatabaseAsync(\":memory:\");\n    const identityManager = new IdentityManager({\n        actingIdentity: {\n            id: 0,\n            name: \"admin\",\n            isAdmin: true\n        },\n        cmsDatabase,\n        secret\n    });\n\n    await identityManager.addIdentityAsync({ name: \"johndoe\" }, \"password\");\n    let identity = await identityManager.getIdentityByNameAsync(\"johndoe\");\n    await identityManager.resetPasswordAsync(identity, \"newPassword\");\n\n    const otherIdentityManager = new IdentityManager({\n        actingIdentity: identity,\n        cmsDatabase,\n        secret\n    });\n\n    const isValid = await otherIdentityManager.validatePasswordAsync(\"newPassword\");\n    assert.equal(isValid, true);\n\n}\n\nexports[\"IdentityManager: changePasswordAsync.\"] = async () => {\n    const secret = \"secret\";\n    const cmsDatabase = await CmsDatabase.getCmsDatabaseAsync(\":memory:\");\n    const identityManager = new IdentityManager({\n        actingIdentity: {\n            id: 0,\n            name: \"admin\",\n            isAdmin: true\n        },\n        cmsDatabase,\n        secret\n    });\n\n    await identityManager.addIdentityAsync({ name: \"johndoe\" }, \"password\");\n    let identity = await identityManager.getIdentityByNameAsync(\"johndoe\");\n\n    const otherIdentityManager = new IdentityManager({\n        actingIdentity: identity,\n        cmsDatabase,\n        secret\n    });\n\n    await otherIdentityManager.changePasswordAsync(\"password\", \"newPassword\");\n    const isValid = await otherIdentityManager.validatePasswordAsync(\"newPassword\");\n    assert.equal(isValid, true);\n\n}\n\nexports[\"IdentityManager: changePasswordAsync with invalid password.\"] = async () => {\n    const secret = \"secret\";\n    const cmsDatabase = await CmsDatabase.getCmsDatabaseAsync(\":memory:\");\n    const identityManager = new IdentityManager({\n        actingIdentity: {\n            id: 0,\n            name: \"admin\",\n            isAdmin: true\n        },\n        cmsDatabase,\n        secret\n    });\n\n    await identityManager.addIdentityAsync({ name: \"johndoe\" }, \"password\");\n    let identity = await identityManager.getIdentityByNameAsync(\"johndoe\");\n\n    const otherIdentityManager = new IdentityManager({\n        actingIdentity: identity,\n        cmsDatabase,\n        secret\n    });\n\n    try {\n        await otherIdentityManager.changePasswordAsync(\"BadPassword\", \"newPassword\");\n    } catch (error) {\n        assert.equal(error.message, \"Invalid password.\");\n    }\n\n}\n"],"file":"IdentityManager.js"}
{"version":3,"sources":["../../src/managers/RoleManager.js"],"names":["RoleManager","constructor","cmsDatabase","actingIdentity","version","database","rolesTable","getTable","name","assignmentsTable","isAdmin","_assertIsAdmin","Error","addRoleAsync","role","addAsync","removeRoleAsync","removeAsync","addRoleToIdentityAsync","identity","assignment","roleId","id","identityId","removeRoleFromIdentityAsync","where","column","isEqualTo","and","getRoleByNameAsync","getFirstAsync","getRolesAsync","assignments","select","isIn","toArrayAsync","getRolesForIdentity","getAllRolesAsync"],"mappings":"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","sourcesContent":["export default class RoleManager {\n    constructor({\n        cmsDatabase,\n        actingIdentity\n    }) {\n        const version = \"1.0.0\";\n        this.actingIdentity = actingIdentity;\n        this.database = cmsDatabase;\n        this.rolesTable = this.database.getTable({ name: \"role\", version });\n        this.assignmentsTable = this.database.getTable({ name: \"assignment\", version });\n        this.isAdmin = actingIdentity.isAdmin !== 0;\n    }\n\n    _assertIsAdmin() {\n        if (!this.isAdmin) {\n            throw new Error(\"The acting identity needs to be an admin to manage role assignments.\");\n        }\n    }\n\n    async addRoleAsync(role) {\n        this._assertIsAdmin();\n\n        return await this.rolesTable.addAsync(role);\n    }\n\n    async removeRoleAsync(role) {\n        this._assertIsAdmin();\n\n        return await this.rolesTable.removeAsync(role);\n    }\n\n    async addRoleToIdentityAsync({ role, identity }) {\n        this._assertIsAdmin();\n\n        const assignment = {\n            roleId: role.id,\n            identityId: identity.id\n        };\n\n        return await this.assignmentsTable.addAsync(assignment);\n    }\n\n    async removeRoleFromIdentityAsync({ role, identity }) {\n        this._assertIsAdmin();\n\n        return await this.assignmentsTable.where()\n            .column(\"roleId\")\n            .isEqualTo(role.id)\n            .and()\n            .column(\"identityId\")\n            .isEqualTo(identity.id)\n            .removeAsync();\n    }\n\n    async getRoleByNameAsync({ name }) {\n        this._assertIsAdmin();\n\n        return await this.rolesTable.where()\n            .column(\"name\")\n            .isEqualTo(name)\n            .getFirstAsync();\n    }\n\n    async getRolesAsync(){\n        const assignments = this.assignmentsTable.where()\n            .column(\"identityId\")\n            .isEqualTo(this.actingIdentity.id)\n            .select({ id: \"id\" });\n\n        return await this.rolesTable.where()\n            .column(\"id\")\n            .isIn(assignments)\n            .toArrayAsync();\n    }\n\n    async getRolesForIdentity(identity) {\n        this._assertIsAdmin();\n\n        const assignments = this.assignmentsTable.where()\n            .column(\"identityId\")\n            .isEqualTo(identity.id)\n            .select({ id: \"id\" });\n\n        return await this.rolesTable.where()\n            .column(\"id\")\n            .isIn(assignments)\n            .toArrayAsync();\n    }\n\n    async getAllRolesAsync(){\n        this._assertIsAdmin();\n\n        return await this.rolesTable.where().toArrayAsync();\n    }\n\n}"],"file":"RoleManager.js"}
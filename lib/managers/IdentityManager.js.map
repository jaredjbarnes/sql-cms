{"version":3,"sources":["../../src/managers/IdentityManager.js"],"names":["IdentityManager","constructor","options","_assertOptions","actingIdentity","identitiesTable","cmsDatabase","getTable","name","version","secret","Error","_isNullOrEmpty","value","_createHash","crypto","createHmac","update","digest","_assertIsAdmin","isAdmin","_assertValidIdentity","identity","password","addIdentityAsync","hash","addAsync","removeIdentityAsync","removeAsync","validatePasswordAsync","where","column","isEqualTo","id","and","getFirstAsync","resetPasswordAsync","newPassword","newHash","updateAsync","getIdentityByNameAsync","changePasswordAsync","oldPassword","oldHash","foundIdentity"],"mappings":"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","sourcesContent":["import crypto from \"crypto\";\n\nexport default class IdentityManager {\n    constructor(options = {}) {\n        this._assertOptions(options);\n\n        this.actingIdentity = options.actingIdentity;\n        this.identitiesTable = options.cmsDatabase.getTable({\n            name: \"identity\",\n            version: \"1.0.0\"\n        });\n        this.secret = options.secret;\n\n    }\n\n    _assertOptions({\n        cmsDatabase,\n        actingIdentity,\n        secret\n    }) {\n        if (actingIdentity == null) {\n            throw new Error(\"Null Argument Exception: IdentityManager expected an actingIdentity.\");\n        }\n\n        if (cmsDatabase == null) {\n            throw new Error(\"Null Argument Exception: IdentityManager expected a cmsDatabase.\");\n        }\n\n        if (this._isNullOrEmpty(secret)) {\n            throw new Error(\"Null Argument Exception: IdentityManager expected a secret for hashing passwords.\");\n        }\n    }\n\n    _isNullOrEmpty(value) {\n        return value == null || value === \"\";\n    }\n\n    _createHash(value) {\n        return crypto.createHmac('sha256', this.secret)\n            .update(value, \"utf8\")\n            .digest(\"hex\");\n    }\n\n    _assertIsAdmin() {\n        if (this.isAdmin) {\n            throw new Error(\"The acting identity needs to be an admin to manage role assignments.\");\n        }\n    }\n\n    _assertValidIdentity(identity, password) {\n        if (this._isNullOrEmpty(identity.name)) {\n            throw new Error(\"An identity's name cannot be null or empty.\");\n        }\n\n        if (this._isNullOrEmpty(password)) {\n            throw new Error();\n        }\n    }\n\n    async addIdentityAsync(identity, password) {\n        this._assertIsAdmin();\n        this._assertValidIdentity(identity, password);\n\n        identity.hash = this._createHash(password);\n\n        return await this.identitiesTable.addAsync(identity);\n    }\n\n    async removeIdentityAsync(identity) {\n        this._assertIsAdmin();\n\n        return await this.identitiesTable.removeAsync(identity);\n    }\n\n    async validatePasswordAsync(password) {\n        const hash = this._createHash(password);\n\n        const identity = await this.identitiesTable.where()\n            .column(\"id\")\n            .isEqualTo(this.actingIdentity.id)\n            .and()\n            .column(\"hash\")\n            .isEqualTo(hash)\n            .getFirstAsync();\n\n        if (identity == null) {\n            throw new Error(\"Invalid password.\");\n        };\n\n        return true;\n    }\n\n    async resetPasswordAsync(identity, newPassword) {\n        this._assertIsAdmin();\n\n        const newHash = this._createHash(newPassword);\n\n        return await this.identitiesTable.where()\n            .column(\"id\")\n            .isEqualTo(identity.id)\n            .updateAsync({\n                hash: newHash\n            });\n    }\n\n    async getIdentityByNameAsync(name){\n        return await this.identitiesTable.where()\n        .column(\"name\")\n        .isEqualTo(name)\n        .getFirstAsync();\n    }\n\n    async changePasswordAsync(oldPassword, newPassword) {\n        const oldHash = this._createHash(oldPassword);\n\n        const foundIdentity = await this.identitiesTable.where()\n            .column(\"id\")\n            .isEqualTo(this.actingIdentity.id)\n            .and()\n            .column(\"hash\")\n            .isEqualTo(oldHash)\n            .getFirstAsync();\n\n        if (foundIdentity == null) {\n            throw new Error(\"Invalid password.\");\n        }\n\n        const newHash = this._createHash(newPassword);\n\n        return await this.identitiesTable.where()\n            .column(\"id\")\n            .isEqualTo(this.actingIdentity.id)\n            .and()\n            .column(\"hash\")\n            .isEqualTo(oldHash)\n            .updateAsync({\n                hash: newHash\n            });\n    }\n\n}"],"file":"IdentityManager.js"}